#!/usr/bin/env python

import sys
import os
import json
import logging
from optparse import OptionParser

from sdntest.suite import TestSuite

LEVELS = {
    'debug': logging.DEBUG,
    'info': logging.INFO,
    'warning': logging.WARNING,
    'error': logging.ERROR,
    'critical': logging.CRITICAL
}

logger = logging.getLogger()
formatter = logging.Formatter('%(asctime)s | %(name)s | %(levelname)s | %(message)s')
output = logging.StreamHandler(sys.stdout)
output.setFormatter(formatter)
logger.addHandler(output)

def cleanup():
    # TODO: no implementation currently
    pass

class TestRunner(object):

    def __init__(self):
        """
        Init a test runner.
        """
        self.options = None
        self.args = None

        self.parseArgs()
        self.setup()
        self.begin()

    def parseArgs(self):
        """
        Parse command-line args and return options object.

        returns: opts parse options dict
        """

        desc = ("The %prog utility start experiments for general SDN testcases\n"
                "from the command line. Users can define their own testcases\n"
                "configuration and invoke test framework to repeatedly execute them.")

        usage = ("%prog [options]\n"
                 "(type %prog -h for details)")

        opts = OptionParser(description=desc, usage=usage)
        opts.add_option('--config', '-c', type='string',
                        help="set testcase configuration file",
                        metavar="FILE")
        opts.add_option('--verbosity', '-v', type='choice',
                         choices=list(LEVELS.keys()), default='info',
                         help='|'.join(LEVELS.keys()))

        self.options, self.args = opts.parse_args()

        if self.args:
            opts.print_help()
            exit()

    def setup(self):
        """
        Setup and validate environment.
        """

        # set logging verbosity
        if LEVELS[self.options.verbosity] > LEVELS['info']:
            logger.warn('*** WARNING: selected verbosity level (%s) will hide CLI '
                        'output!\n'
                        'Please restart SDNTest with -v [debug, info].\n'
                        % self.options.verbosity)
        logger.setLevel(LEVELS[self.options.verbosity])
        output.setLevel(LEVELS[self.options.verbosity])

    def begin(self):
        """
        Start the testcase.
        """

        configfile = './config.json'
        opts = self.options

        if opts.config:
            configfile = opts.config
        else:
            logger.info("Not set config file. Using default value: ./config.json")

        with open(configfile) as f:
            configs = json.load(f)

        if 'workspace' in configs.keys():
            workspace = configs['workspace']
        else:
            workspace = os.path.dirname(configfile)

        workspace = os.path.realpath(workspace)
        os.chdir(workspace)
        logging.basicConfig(filename='output.log')
        configs['workspace'] = workspace
        logger.debug("Create test suite:")
        logger.debug("TestSuite(%s)", configs)
        testcase = TestSuite(configs)
        testcase.run()

if "__main__" == __name__:
    try:
        TestRunner()
    except KeyboardInterrupt:
        logger.info("\n\nKeyboard Interrupt. Cleaning up and existing...\n\n")
        cleanup()
    except Exception:
        type_, val_, trace_ = sys.exc_info()
        errorMsg = ("-"*80 + "\n" +
                    "Caught exception. Exiting test...\n\n" +
                    "%s: %s\n" % (type_.__name__, val_) +
                    "-"*80 + "\n")
        logger.error(errorMsg)
        import traceback
        stackTrace = traceback.format_exc()
        logger.debug(stackTrace + "\n")
        cleanup()
