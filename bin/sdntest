#!/usr/bin/env python

import sys
import os
import json
import logging
if sys.version[0] == '2':
    import Queue as queue
else:
    import queue
from optparse import OptionParser
from math import ceil
from copy import deepcopy

from sdntest.suite import TestSuite

LEVELS = {
    'debug': logging.DEBUG,
    'info': logging.INFO,
    'warning': logging.WARNING,
    'error': logging.ERROR,
    'critical': logging.CRITICAL
}

logger = logging.getLogger()
formatter = logging.Formatter('%(asctime)s | %(name)s | %(levelname)s | %(message)s')
output = logging.StreamHandler(sys.stdout)
output.setFormatter(formatter)
logger.addHandler(output)

class TestRunner(object):

    def __init__(self):
        """
        Init a test runner.
        """
        self.options = None
        self.args = None
        self.testcase = None
        self.parallel = 0

    def cleanup(self):
        # Cleanup the environment
        if type(self.testcase) == list:
            for testcase in self.testcase:
                testcase.kill_platform()
        else:
            self.testcase.kill_platform()

    def parseArgs(self):
        """
        Parse command-line args and return options object.

        returns: opts parse options dict
        """

        desc = ("The %prog utility start experiments for general SDN testcases\n"
                "from the command line. Users can define their own testcases\n"
                "configuration and invoke test framework to repeatedly execute them.")

        usage = ("%prog [options]\n"
                 "(type %prog -h for details)")

        opts = OptionParser(description=desc, usage=usage)
        opts.add_option('--config', '-c', type='string',
                        help="set testcase configuration file",
                        metavar="FILE")
        opts.add_option('--verbosity', '-v', type='choice',
                         choices=list(LEVELS.keys()), default='info',
                         help='|'.join(LEVELS.keys()))

        self.options, self.args = opts.parse_args()

        if self.args:
            opts.print_help()
            exit()

    def setup(self):
        """
        Setup and validate environment.
        """

        # set logging verbosity
        if LEVELS[self.options.verbosity] > LEVELS['info']:
            logger.warn('*** WARNING: selected verbosity level (%s) will hide CLI '
                        'output!\n'
                        'Please restart SDNTest with -v [debug, info].\n'
                        % self.options.verbosity)
        logger.setLevel(LEVELS[self.options.verbosity])
        output.setLevel(LEVELS[self.options.verbosity])

    def partition(self, configs):
        """
        Partition testcase for parallel execution.
        """
        self.testcase = []
        total_repeat = configs.get('repeat', 0)
        max_repeat = int(ceil(float(total_repeat) / self.parallel))
        for group in range(self.parallel):
            group_configs = deepcopy(configs)
            group_configs['group'] = group + 1
            repeat = min(max_repeat, total_repeat)
            total_repeat -= repeat
            group_configs['repeat'] = repeat
            testcase = TestSuite(group_configs)
            self.testcase.append(testcase)
            testcase.start()

    def getException(self):
        """
        Try to fetch exception from exc_pool of each testcase thread.

        return: exception
        """
        if type(self.testcase) == list:
            for testcase in self.testcase:
                try:
                    exc = testcase.exc_pool.get(block=False)
                except queue.Empty:
                    pass
                else:
                    return exc
        else:
            try:
                exc = self.testcase.exc_pool.get(block=False)
            except queue.Empty:
                pass
            else:
                return exc
        raise queue.Empty

    def begin(self):
        """
        Start the testcase.
        """

        configfile = './config.json'
        opts = self.options

        if opts.config:
            configfile = opts.config
        else:
            logger.info("Not set config file. Using default value: ./config.json")

        with open(configfile) as f:
            configs = json.load(f)

        if 'workspace' in configs.keys():
            workspace = configs['workspace']
        else:
            workspace = os.path.dirname(configfile)

        workspace = os.path.realpath(workspace)
        os.chdir(workspace)
        logging.basicConfig(filename='output.log')
        configs['workspace'] = workspace

        if 'parallel' in configs.keys():
            self.parallel = configs['parallel']

        if self.parallel > 1:
            logger.debug("Parallel number: %d", self.parallel)
            logger.debug("Partition for parallel")
            self.partition(configs)
        else:
            logger.debug("Create test suite:")
            logger.debug("TestSuite(%s)", configs)
            self.testcase = TestSuite(configs)
            self.testcase.start()

        # TODO: wait for all testcases finish
        while True:
            try:
                exc = self.getException()
            except queue.Empty:
                pass
            else:
                raise exc

            if type(self.testcase) == list:
                for testcase in self.testcase:
                    testcase.join(0.1)
                if sum([bool(tc.isAlive()) for tc in self.testcase]):
                    continue
                else:
                    break
            else:
                self.testcase.join(0.1)
                if self.testcase.isAlive():
                    continue
                else:
                    break


if "__main__" == __name__:
    try:
        runner = TestRunner()
        runner.parseArgs()
        runner.setup()
        runner.begin()
    except KeyboardInterrupt:
        logger.info("\n\nKeyboard Interrupt. Cleaning up and existing...\n\n")
        runner.cleanup()
    except Exception:
        type_, val_, trace_ = sys.exc_info()
        errorMsg = ("\n" + "-"*80 + "\n" +
                    "Caught exception. Exiting test...\n\n" +
                    "%s: %s\n" % (type_.__name__, val_) +
                    "-"*80 + "\n")
        logger.error(errorMsg)
        import traceback
        stackTrace = traceback.format_exc()
        logger.debug(stackTrace + "\n")
        runner.cleanup()
